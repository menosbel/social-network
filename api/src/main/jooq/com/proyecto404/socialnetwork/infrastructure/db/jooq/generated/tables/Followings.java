/*
 * This file is generated by jOOQ.
 */
package com.proyecto404.socialnetwork.infrastructure.db.jooq.generated.tables;


import com.proyecto404.socialnetwork.infrastructure.db.jooq.generated.Public;
import com.proyecto404.socialnetwork.infrastructure.db.jooq.generated.tables.records.FollowingsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Followings extends TableImpl<FollowingsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.followings</code>
     */
    public static final Followings FOLLOWINGS = new Followings();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FollowingsRecord> getRecordType() {
        return FollowingsRecord.class;
    }

    /**
     * The column <code>public.followings.user_id</code>.
     */
    public final TableField<FollowingsRecord, Integer> USER_ID = createField(DSL.name("user_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.followings.followed_id</code>.
     */
    public final TableField<FollowingsRecord, Integer> FOLLOWED_ID = createField(DSL.name("followed_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private Followings(Name alias, Table<FollowingsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Followings(Name alias, Table<FollowingsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.followings</code> table reference
     */
    public Followings(String alias) {
        this(DSL.name(alias), FOLLOWINGS);
    }

    /**
     * Create an aliased <code>public.followings</code> table reference
     */
    public Followings(Name alias) {
        this(alias, FOLLOWINGS);
    }

    /**
     * Create a <code>public.followings</code> table reference
     */
    public Followings() {
        this(DSL.name("followings"), null);
    }

    public <O extends Record> Followings(Table<O> child, ForeignKey<O, FollowingsRecord> key) {
        super(child, key, FOLLOWINGS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Followings as(String alias) {
        return new Followings(DSL.name(alias), this);
    }

    @Override
    public Followings as(Name alias) {
        return new Followings(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Followings rename(String name) {
        return new Followings(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Followings rename(Name name) {
        return new Followings(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
